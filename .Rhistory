set_key("649v2eOmWyQoDCurYqPiKjhMgjarEbS70-drf7uDH3A")
# Cuando se tenga un servidor de OpenStreet
#options(osrm.server = "http://localhost:5000/")
#getOption("osrm.server")
# Datos Hospitales ----
#hospitales <- read_excel(path = "c:/Users/rbonilla/Downloads/NearestHospital/kzp17_daten.xlsx", sheet = "KZ2017_KZP17")
hospitales <- read_csv("C:/Users/rbonilla/Downloads/NearestHospital/Registro_Especial_de_Prestadores_de_Servicios_de_Salud.csv",
locale = locale(asciify = TRUE))
# Ciudad ----
ciudad = "BOGOTÁ"
# Filtro por ciudad
hospitales <- hospitales %>% filter(nompio == ciudad)
# Estandarizacion de strings
hospitales <- hospitales %>% mutate_if(is.character, ~toupper(stri_trans_general(str = ., id = "ASCII-Latin")))
# Estandarizar direcciones
hospitales$direccion <- EstandarizarDirecciones(direcciones = hospitales$direccion)
# se filtran las direcciones que se buscan y se ajusta la ortografia para llamar a osrm
hospitales_Seleccionados <- hospitales %>% filter(nchar(direccion)>5) %>% dplyr::select(nombre, direccion, telefono, email, najunombre, ese, nitsnit)
if(grepl(pattern = "CALI", x = ciudad)){
hospitales_Seleccionados$direccion <- paste(str_to_title(hospitales_Seleccionados$direccion) , ", Cali Valle, COLOMBIA", sep = "")
}else{
hospitales_Seleccionados$direccion <- paste(str_to_title(hospitales_Seleccionados$direccion) , ", Bogota, COLOMBIA", sep = "")
}
# Ejemplo de Hospitales
set.seed(33)
sample_n(hospitales_Seleccionados, 3)
# RUN geocode
hospitales_Seleccionados_geocoded <- geocode(hospitales_Seleccionados$direccion)
View(hospitales_Seleccionados_geocoded)
hospitales_Seleccionados_geocoded %>% write_rds(path = "hospitales_Seleccionados_geocoded_BOGOTA.RDS")
# crear LONG LAT ----
dfCoordinates <- data.frame(st_coordinates(x = hospitales_Seleccionados_geocoded), stringsAsFactors = F)
names(dfCoordinates) <- c("lon", "lat")
hospitales_Seleccionados_geocoded <- hospitales_Seleccionados_geocoded %>% bind_cols(dfCoordinates)
# El archivo original los Nombres pero el encoded la posicion se pega por id ----
hospitales_Seleccionados$id <- as.numeric(1:nrow(hospitales_Seleccionados))
hospitales_Seleccionados_geocoded <- left_join(x = hospitales_Seleccionados_geocoded,
y = dplyr::select(hospitales_Seleccionados, -direccion),
by = "id")
# Filtro "HOSPITAL" ----
hospitales_Seleccionados_geocoded <- hospitales_Seleccionados_geocoded %>%
#filter(grepl(pattern = "HOSPITAL|CLINICA|UNIDAD|FUNDACION|CENTRO MEDICO|IPS|EPS", x = nombre)) %>%
filter(grepl(pattern = "HOSPITAL|CLINICA|UNIDAD|FUNDACION|CENTRO MEDICO", x = nombre)) %>%
filter(!grepl(pattern = "ODON", x = nombre)) %>%
filter(!grepl(pattern = "MAESTRO", x = nombre))
# Raster MAP ----
icons <- iconList(
hospital = makeIcon("location_3440906.png", iconWidth = 18, iconHeight = 18)
)
basicmap <- leaflet() %>%
#addProviderTiles(providers$CartoDB.Positron) %>%
addProviderTiles(providers$OpenStreetMap) %>%
addMarkers(data = hospitales_Seleccionados_geocoded,
lng = ~lon, lat = ~lat, popup = ~nombre,
group = "Unidades de atención", icon = icons["hospital"])
basicmap %>%
addLayersControl(overlayGroups = c("Hospitales"))
View(hospitales)
# HereR geocode
#geocode("Calle 52 71d 37, Bogota, COLOMBIA")
geocode(c("CLINICAS JASBAN, Bogota, COLOMBIA", "AVENIDA CALLE 24 72B 94, Bogota, COLOMBIA", "TRANSVERSAL 3 49 00, Bogota, COLOMBIA"))
# HereR geocode
#geocode("Calle 52 71d 37, Bogota, COLOMBIA")
geocode(c("CLINICAS JASBAN, Bogota, COLOMBIA", "AVENIDA CALLE 24 72B 94, Bogota, COLOMBIA", "TRANSVERSAL 3 49-00, Bogota, COLOMBIA"))
gsub(pattern = "([0-1])* ([0-1]) *([0-1])", replacement = "\\1\\2-\\3", x = "TRANSVERSAL 34A BIS 40 67SUR")
gsub(pattern = "([0-1]).([0-1]) ([0-1]).", replacement = "\\1\\2-\\3", x = "TRANSVERSAL 34A BIS 40 67SUR")
gsub(pattern = "([0-1])+.([0-1])+ ([0-1])+.", replacement = "\\1\\2-\\3", x = "TRANSVERSAL 34A BIS 40 67SUR")
gsub(pattern = "([0-1]+).([0-1]+) ([0-1]+).", replacement = "\\1\\2-\\3", x = "TRANSVERSAL 34A BIS 40 67SUR")
gsub(pattern = "([0-9]+).([0-9]+) ([0-9]+).", replacement = "\\1\\2-\\3", x = "TRANSVERSAL 34A BIS 40 67SUR")
gsub(pattern = "[[:alpha:]].([0-9]+).([0-9]+) ([0-9]+).", replacement = "\\1\\2-\\3", x = "TRANSVERSAL 34A BIS 40 67SUR")
gsub(pattern = "^[[:alpha:]]+.([0-9]+).([0-9]+) ([0-9]+).", replacement = "\\1\\2-\\3", x = "TRANSVERSAL 34A BIS 40 67SUR")
gsub(pattern = "^[[:alpha:]]+.([0-9]+).([0-9]+) ([0-9]+).", replacement = " - \\1 - ", x = "TRANSVERSAL 34A BIS 40 67SUR")
gsub(pattern = "^[[:alpha:]]+.+([0-9]+).+([0-9]+) ([0-9]+).+", replacement = " - \\1 - ", x = "TRANSVERSAL 34A BIS 40 67SUR")
library(dplyr)
library(ggplot2)
library(readr)
library(readxl)
library(writexl)
library(tidyverse)
library(stringi)
library(htmlwidgets)
library(osrm) # Se podria crear un servidor local - Convierte Direcciones en longitud y latitud
library(hereR) # Requiere de una KEY - Calcula las distancias entre dos puntos long-lat
library(leaflet)
library(sf)
library(raster)
library(gstat)
library(caret)
setwd("C:/Users/rbonilla/Google Drive/work/TheProfessional/PersonalResearch/Github/CoberturaHospitalaria/")
source(file = "CoberturaHospitalaria_funciones.R", encoding = "utf8")
# KEY para acceder HereR herer::geocode
set_key("649v2eOmWyQoDCurYqPiKjhMgjarEbS70-drf7uDH3A")
# Cuando se tenga un servidor de OpenStreet
#options(osrm.server = "http://localhost:5000/")
#getOption("osrm.server")
# Datos Hospitales ----
#hospitales <- read_excel(path = "c:/Users/rbonilla/Downloads/NearestHospital/kzp17_daten.xlsx", sheet = "KZ2017_KZP17")
hospitales <- read_csv("C:/Users/rbonilla/Downloads/NearestHospital/Registro_Especial_de_Prestadores_de_Servicios_de_Salud.csv",
locale = locale(asciify = TRUE))
# Ciudad ----
ciudad = "BOGOTÁ"
# Filtro por ciudad
hospitales <- hospitales %>% filter(nompio == ciudad)
# Estandarizacion de strings
hospitales <- hospitales %>% mutate_if(is.character, ~toupper(stri_trans_general(str = ., id = "ASCII-Latin")))
direcciones = hospitales$direccion
direcciones <- toupper(stri_trans_general(str = direcciones, id = "ASCII-Latin"))
direcciones <- gsub(pattern = "[.]", replacement = " ", x = direcciones)
direcciones <- gsub(pattern = " NO ", replacement = " ", x = direcciones)
direcciones <- gsub(pattern = "N°", replacement = " ", x = direcciones)
direcciones <- gsub(pattern = "Nº", replacement = " ", x = direcciones)
direcciones <- gsub(pattern = "Nª", replacement = " ", x = direcciones)
direcciones <- gsub(pattern = "#", replacement = " ", x = direcciones)
direcciones <- gsub(pattern = "CLL ", replacement = "CALLE ", x = direcciones)
direcciones <- gsub(pattern = "AV ", replacement = "AVENIDA ", x = direcciones)
direcciones <- gsub(pattern = "KRA ", replacement = "CARRERA ", x = direcciones)
direcciones <- gsub(pattern = "KR ", replacement = "CARRERA ", x = direcciones)
direcciones <- gsub(pattern = "AK ", replacement = "AVENIDA CARRERA ", x = direcciones)
direcciones <- gsub(pattern = "AC ", replacement = "AVENIDA CALLE ", x = direcciones)
direcciones <- gsub(pattern = "CRA ", replacement = "CARRERA ", x = direcciones)
direcciones <- gsub(pattern = "CR ", replacement = "CARRERA ", x = direcciones)
direcciones <- gsub(pattern = "CL ", replacement = "CALLE ", x = direcciones)
direcciones <- gsub(pattern = "TV ", replacement = "TRANSVERSAL ", x = direcciones)
direcciones <- gsub(pattern = "TRV ", replacement = "TRANSVERSAL ", x = direcciones)
direcciones <- gsub(pattern = "TRANV ", replacement = "TRANSVERSAL ", x = direcciones)
direcciones <- gsub(pattern = "TRANSV ", replacement = "TRANSVERSAL ", x = direcciones)
direcciones <- gsub(pattern = "DG ", replacement = "DIAGONAL ", x = direcciones)
direcciones <- gsub(pattern = "^K ", replacement = "CARRERA ", x = direcciones)
direcciones <- gsub(pattern = "NUM ", replacement = " ", x = direcciones)
direcciones <- gsub(pattern = "NUMERO ", replacement = " ", x = direcciones)
direcciones <- gsub(pattern = "AUTO ", replacement = "AUTOPISTA ", x = direcciones)
direcciones <- gsub(pattern = "AUTOP N ", replacement = "AUTOPISTA NORTE ", x = direcciones)
# Quitar parentesis y contenido
direcciones <-gsub(pattern = "\\s*\\([^\\)]+\\)",replacement = " ",x = direcciones)
# Quitar abreviaturas
direcciones <- gsub(pattern = " OF.*| CN.*| CON.*| EDF.*| EDIF.*| LOC.*| PIS.*| ED.*| TO.*| BARR.*| CS.*| AP.*| IN.*| PI.*| Y .*| LC.*| PSO.*| P .*| P-.*| SEGUNDO.*| PLA.*| PRIM.*| 1ER.*| DENTRO.*| ENTRA.*| BODEG.*| SALA.*| CENTRO COM.*| DEPART.*| CASA.*| CC.*",
replacement = "", x = direcciones)
test <- data.frame(dir = direcciones)
View(test)
gsub(pattern = " ([0-9]+).+([0-9]+).+([0-9]+).+", replacement = "- \\1 - \\2 - \\3 -", x = "TRANSVERSAL 34A BIS 40 67SUR")
gsub(pattern = " ([0-9]+).+ ([0-9]+) .+ ([0-9]+) .+", replacement = "- \\1 - \\2 - \\3 -", x = "TRANSVERSAL 34A BIS 40 67SUR")
gsub(pattern = " ([0-9]{1,2}).+ ([0-9]{1,2}) .+ ([0-9]{1,2}) .+", replacement = "- \\1 - \\2 - \\3 -", x = "TRANSVERSAL 34A BIS 40 67SUR")
gsub(pattern = " ([0-9]{1,2}).* ([0-9]{1,2}) .* ([0-9]{1,2}) .*", replacement = "- \\1 - \\2 - \\3 -", x = "TRANSVERSAL 34A BIS 40 67SUR")
gsub(pattern = " ([0-9]{1,2}) ([0-9]{1,2}) ([0-9]{1,2})", replacement = "- \\1 - \\2 - \\3 -", x = "TRANSVERSAL 34A BIS 40 67SUR")
gsub(pattern = " ([0-9]{1,2}) ", replacement = "- \\1 - \\2 - \\3 -", x = "TRANSVERSAL 34A BIS 40 67SUR")
gsub(pattern = " ([0-9]{1,2}) ", replacement = "- \\1 -", x = "TRANSVERSAL 34A BIS 40 67SUR")
gsub(pattern = " ([0-9]{1,2}) ", replacement = "- \\1 -", x = "TRANSVERSAL 34A BIS 40 67")
gsub(pattern = " ([0-9]{1,2}) ", replacement = "- \\2 -", x = "TRANSVERSAL 34A BIS 40 67")
gsub(pattern = " ([0-9]{1,2}) ", replacement = "\\1-\\2 -", x = "TRANSVERSAL 34A BIS 40 67")
gsub(pattern = " ([0-9]{1,2}) ", replacement = " \\1-\\2", x = "TRANSVERSAL 34A BIS 40 67")
gsub(pattern = " ([0-9]{1,2}) ", replacement = " \\1-\\2", x = "TRANSVERSAL 34 BIS 40 67")
gsub(pattern = "([alpha])+ ([0-9]{1,2}) ", replacement = " \\1-\\2", x = "TRANSVERSAL 34A BIS 40 67")
gsub(pattern = "([alpha]+) ([0-9]{1,2}) ", replacement = " \\1-\\2", x = "TRANSVERSAL 34A BIS 40 67")
gsub(pattern = "([A-z0-9]+) ([0-9]{1,2}) ", replacement = " \\1-\\2", x = "TRANSVERSAL 34A BIS 40 67")
gsub(pattern = "([0-9]{1,2}).*$", replacement = "-\\1", x = "TRANSVERSAL 34A BIS 40 67")
gsub(pattern = "^.*([0-9]{1,2}).*$", replacement = "-\\1", x = "TRANSVERSAL 34A BIS 40 67")
gsub(pattern = "^.* ([0-9]{1,2}).*$", replacement = "-\\1", x = "TRANSVERSAL 34A BIS 40 67")
gsub(pattern = "(^.* )([0-9]{1,2}).*$", replacement = "\\1-\\2", x = "TRANSVERSAL 34A BIS 40 67")
gsub(pattern = "(^.* )( [0-9]{1,2}).*$", replacement = "\\1-\\2", x = "TRANSVERSAL 34A BIS 40 67")
gsub(pattern = "(^.*)( [0-9]{1,2}).*$", replacement = "\\1-\\2", x = "TRANSVERSAL 34A BIS 40 67")
gsub(pattern = "(^.*)( [0-9]{1,2} ).*$", replacement = "\\1-\\2", x = "TRANSVERSAL 34A BIS 40 67")
gsub(pattern = "(^.*)( [0-9]{1,2}).*$", replacement = "\\1-\\2", x = "TRANSVERSAL 34A BIS 40 67")
gsub(pattern = "(^.*)( [0-9]{1,2} ).*$", replacement = "\\1-\\2", x = "TRANSVERSAL 34A BIS 40 67")
gsub(pattern = "(^.*)( [0-9]{1,2}).*$", replacement = "-\\2", x = "TRANSVERSAL 34A BIS 40 67")
gsub(pattern = "(^.* )([0-9]{1,2}).*$", replacement = "\\1-\\2", x = "TRANSVERSAL 34A BIS 40 67")
gsub(pattern = "(^.*) ([0-9]{1,2}).*$", replacement = "\\1-\\2", x = "TRANSVERSAL 34A BIS 40 67")
gsub(pattern = "(^.*) ([0-9]{1,2}).*$", replacement = "\\1-\\2", x = "TRANSVERSAL 34A BIS 40 67 SUR")
gsub(pattern = "(^.*) ([0-9]{1,2})(.*)$", replacement = "\\1-\\2\\3", x = "TRANSVERSAL 34A BIS 40 67 SUR")
gsub(pattern = "(^.*) ([0-9]{1,2})(.*)$", replacement = "\\1-\\2\\3", x = "TRANSVERSAL CARRERA 34A BIS 40B 67 SUR")
gsub(pattern = "(^.*) ([0-9]{1,2})(.*)$", replacement = "\\1-\\2\\3", x = "TRANSVERSAL CARRERA 34A BIS 40B 7 SUR")
gsub(pattern = "(^.*) ([0-9]{1,2})(.*)$", replacement = "\\1-\\2\\3", x = "TRANSVERSAL CARRERA 34A BIS 4B 67 SUR")
gsub(pattern = "(^.*) ([0-9]{1,2})(.*)$", replacement = "\\1-\\2\\3", x = "TRANSVERSAL CARRERA 34A BIS 4B SUR")
gsub(pattern = "(^.*) ([0-9]{1,2})(.*)$", replacement = "\\1-\\2\\3", x = "TRANSVERSAL CARRERA 34A 4B SUR")
direcciones = hospitales$direccion
# Estandarizacion Direcciones ----
EstandarizarDirecciones <- function(direcciones){
direcciones <- toupper(stri_trans_general(str = direcciones, id = "ASCII-Latin"))
direcciones <- gsub(pattern = "[.]", replacement = " ", x = direcciones)
direcciones <- gsub(pattern = " NO ", replacement = " ", x = direcciones)
direcciones <- gsub(pattern = "N°", replacement = " ", x = direcciones)
direcciones <- gsub(pattern = "Nº", replacement = " ", x = direcciones)
direcciones <- gsub(pattern = "Nª", replacement = " ", x = direcciones)
direcciones <- gsub(pattern = "#", replacement = " ", x = direcciones)
direcciones <- gsub(pattern = "CLL ", replacement = "CALLE ", x = direcciones)
direcciones <- gsub(pattern = "AV ", replacement = "AVENIDA ", x = direcciones)
direcciones <- gsub(pattern = "KRA ", replacement = "CARRERA ", x = direcciones)
direcciones <- gsub(pattern = "KR ", replacement = "CARRERA ", x = direcciones)
direcciones <- gsub(pattern = "AK ", replacement = "AVENIDA CARRERA ", x = direcciones)
direcciones <- gsub(pattern = "AC ", replacement = "AVENIDA CALLE ", x = direcciones)
direcciones <- gsub(pattern = "CRA ", replacement = "CARRERA ", x = direcciones)
direcciones <- gsub(pattern = "CR ", replacement = "CARRERA ", x = direcciones)
direcciones <- gsub(pattern = "CL ", replacement = "CALLE ", x = direcciones)
direcciones <- gsub(pattern = "TV ", replacement = "TRANSVERSAL ", x = direcciones)
direcciones <- gsub(pattern = "TRV ", replacement = "TRANSVERSAL ", x = direcciones)
direcciones <- gsub(pattern = "TRANV ", replacement = "TRANSVERSAL ", x = direcciones)
direcciones <- gsub(pattern = "TRANSV ", replacement = "TRANSVERSAL ", x = direcciones)
direcciones <- gsub(pattern = "DG ", replacement = "DIAGONAL ", x = direcciones)
direcciones <- gsub(pattern = "^K ", replacement = "CARRERA ", x = direcciones)
direcciones <- gsub(pattern = "NUM ", replacement = " ", x = direcciones)
direcciones <- gsub(pattern = "NUMERO ", replacement = " ", x = direcciones)
direcciones <- gsub(pattern = "AUTO ", replacement = "AUTOPISTA ", x = direcciones)
direcciones <- gsub(pattern = "AUTOP N ", replacement = "AUTOPISTA NORTE ", x = direcciones)
# Quitar parentesis y contenido
direcciones <-gsub(pattern = "\\s*\\([^\\)]+\\)",replacement = " ",x = direcciones)
# Quitar abreviaturas
direcciones <- gsub(pattern = " OF.*| CN.*| CON.*| EDF.*| EDIF.*| LOC.*| PIS.*| ED.*| TO.*| BARR.*| CS.*| AP.*| IN.*| PI.*| Y .*| LC.*| PSO.*| P .*| P-.*| SEGUNDO.*| PLA.*| PRIM.*| 1ER.*| DENTRO.*| ENTRA.*| BODEG.*| SALA.*| CENTRO COM.*| DEPART.*| CASA.*| CC.*",
replacement = "", x = direcciones)
direcciones <- gsub(pattern = "-", replacement = " ", x = direcciones)
# Pegar la letra al numero en la dirección ej: CALLE 3 B 98 15 por: CALLE 3B 98 15
direcciones <- gsub(pattern = "(^.*) ([0-9]{1,2})(.*)$", replacement = "\\1-\\2\\3", x = direcciones)
# Quitar espacio a dicionales
direcciones <- str_squish(string = direcciones)
return(direcciones)
}
# Estandarizar direcciones
test <- data.frame(dir00 = hospitales$direccion)
hospitales$direccion <- EstandarizarDirecciones(direcciones = hospitales$direccion)
test <- test %>% mutate(dir01 = hospitales$direccion)
# Estandarizacion Direcciones ----
EstandarizarDirecciones <- function(direcciones){
direcciones <- toupper(stri_trans_general(str = direcciones, id = "ASCII-Latin"))
direcciones <- gsub(pattern = "[.]", replacement = " ", x = direcciones)
direcciones <- gsub(pattern = " NO ", replacement = " ", x = direcciones)
direcciones <- gsub(pattern = "N°", replacement = " ", x = direcciones)
direcciones <- gsub(pattern = "Nº", replacement = " ", x = direcciones)
direcciones <- gsub(pattern = "Nª", replacement = " ", x = direcciones)
direcciones <- gsub(pattern = "#", replacement = " ", x = direcciones)
direcciones <- gsub(pattern = "CLL ", replacement = "CALLE ", x = direcciones)
direcciones <- gsub(pattern = "AV ", replacement = "AVENIDA ", x = direcciones)
direcciones <- gsub(pattern = "KRA ", replacement = "CARRERA ", x = direcciones)
direcciones <- gsub(pattern = "KR ", replacement = "CARRERA ", x = direcciones)
direcciones <- gsub(pattern = "AK ", replacement = "AVENIDA CARRERA ", x = direcciones)
direcciones <- gsub(pattern = "AC ", replacement = "AVENIDA CALLE ", x = direcciones)
direcciones <- gsub(pattern = "CRA ", replacement = "CARRERA ", x = direcciones)
direcciones <- gsub(pattern = "CR ", replacement = "CARRERA ", x = direcciones)
direcciones <- gsub(pattern = "CL ", replacement = "CALLE ", x = direcciones)
direcciones <- gsub(pattern = "TV ", replacement = "TRANSVERSAL ", x = direcciones)
direcciones <- gsub(pattern = "TRV ", replacement = "TRANSVERSAL ", x = direcciones)
direcciones <- gsub(pattern = "TRANV ", replacement = "TRANSVERSAL ", x = direcciones)
direcciones <- gsub(pattern = "TRANSV ", replacement = "TRANSVERSAL ", x = direcciones)
direcciones <- gsub(pattern = "DG ", replacement = "DIAGONAL ", x = direcciones)
direcciones <- gsub(pattern = "^K ", replacement = "CARRERA ", x = direcciones)
direcciones <- gsub(pattern = "NUM ", replacement = " ", x = direcciones)
direcciones <- gsub(pattern = "NUMERO ", replacement = " ", x = direcciones)
direcciones <- gsub(pattern = "AUTO ", replacement = "AUTOPISTA ", x = direcciones)
direcciones <- gsub(pattern = "AUTOP N ", replacement = "AUTOPISTA NORTE ", x = direcciones)
# Quitar parentesis y contenido
direcciones <-gsub(pattern = "\\s*\\([^\\)]+\\)",replacement = " ",x = direcciones)
# Quitar abreviaturas
direcciones <- gsub(pattern = " OF.*| CN.*| CON.*| EDF.*| EDIF.*| LOC.*| PIS.*| ED.*| TO.*| BARR.*| CS.*| AP.*| IN.*| PI.*| Y .*| LC.*| PSO.*| P .*| P-.*| SEGUNDO.*| PLA.*| PRIM.*| 1ER.*| DENTRO.*| ENTRA.*| BODEG.*| SALA.*| CENTRO COM.*| DEPART.*| CASA.*| CC.*",
replacement = "", x = direcciones)
direcciones <- gsub(pattern = "-", replacement = " ", x = direcciones)
# Pegar la letra al numero en la dirección ej: CALLE 3 B 98 15 por: CALLE 3B 98 15
direcciones <- gsub(pattern = " ([A-Z]) ", replacement = "\\1 ", x = direcciones)
# POner el guion del ultimo numero
direcciones <- gsub(pattern = "(^.*) ([0-9]{1,2})(.*)$", replacement = "\\1-\\2\\3", x = direcciones)
# Quitar espacio a dicionales
direcciones <- str_squish(string = direcciones)
return(direcciones)
}
library(dplyr)
library(ggplot2)
library(readr)
library(readxl)
library(writexl)
library(tidyverse)
library(stringi)
library(htmlwidgets)
library(osrm) # Se podria crear un servidor local - Convierte Direcciones en longitud y latitud
library(hereR) # Requiere de una KEY - Calcula las distancias entre dos puntos long-lat
library(leaflet)
library(sf)
library(raster)
library(gstat)
library(caret)
setwd("C:/Users/rbonilla/Google Drive/work/TheProfessional/PersonalResearch/Github/CoberturaHospitalaria/")
source(file = "CoberturaHospitalaria_funciones.R", encoding = "utf8")
# KEY para acceder HereR herer::geocode
set_key("649v2eOmWyQoDCurYqPiKjhMgjarEbS70-drf7uDH3A")
# Cuando se tenga un servidor de OpenStreet
#options(osrm.server = "http://localhost:5000/")
#getOption("osrm.server")
# Datos Hospitales ----
#hospitales <- read_excel(path = "c:/Users/rbonilla/Downloads/NearestHospital/kzp17_daten.xlsx", sheet = "KZ2017_KZP17")
hospitales <- read_csv("C:/Users/rbonilla/Downloads/NearestHospital/Registro_Especial_de_Prestadores_de_Servicios_de_Salud.csv",
locale = locale(asciify = TRUE))
# Ciudad ----
ciudad = "BOGOTÁ"
# Filtro por ciudad
hospitales <- hospitales %>% filter(nompio == ciudad)
# Estandarizacion de strings
hospitales <- hospitales %>% mutate_if(is.character, ~toupper(stri_trans_general(str = ., id = "ASCII-Latin")))
# Estandarizar direcciones
test <- data.frame(dir00 = hospitales$direccion)
hospitales$direccion <- EstandarizarDirecciones(direcciones = hospitales$direccion)
test <- test %>% mutate(dir01 = hospitales$direccion)
# Estandarizacion Direcciones ----
EstandarizarDirecciones <- function(direcciones){
direcciones <- toupper(stri_trans_general(str = direcciones, id = "ASCII-Latin"))
direcciones <- gsub(pattern = "[.]", replacement = " ", x = direcciones)
direcciones <- gsub(pattern = " NO ", replacement = " ", x = direcciones)
direcciones <- gsub(pattern = "N°", replacement = " ", x = direcciones)
direcciones <- gsub(pattern = "Nº", replacement = " ", x = direcciones)
direcciones <- gsub(pattern = "Nª", replacement = " ", x = direcciones)
direcciones <- gsub(pattern = "#", replacement = " ", x = direcciones)
direcciones <- gsub(pattern = "CLL ", replacement = "CALLE ", x = direcciones)
direcciones <- gsub(pattern = "AV ", replacement = "AVENIDA ", x = direcciones)
direcciones <- gsub(pattern = "KRA ", replacement = "CARRERA ", x = direcciones)
direcciones <- gsub(pattern = "KR ", replacement = "CARRERA ", x = direcciones)
direcciones <- gsub(pattern = "AK ", replacement = "AVENIDA CARRERA ", x = direcciones)
direcciones <- gsub(pattern = "AC ", replacement = "AVENIDA CALLE ", x = direcciones)
direcciones <- gsub(pattern = "CRA ", replacement = "CARRERA ", x = direcciones)
direcciones <- gsub(pattern = "CR ", replacement = "CARRERA ", x = direcciones)
direcciones <- gsub(pattern = "CL ", replacement = "CALLE ", x = direcciones)
direcciones <- gsub(pattern = "TV ", replacement = "TRANSVERSAL ", x = direcciones)
direcciones <- gsub(pattern = "TRV ", replacement = "TRANSVERSAL ", x = direcciones)
direcciones <- gsub(pattern = "TRANV ", replacement = "TRANSVERSAL ", x = direcciones)
direcciones <- gsub(pattern = "TRANSV ", replacement = "TRANSVERSAL ", x = direcciones)
direcciones <- gsub(pattern = "DG ", replacement = "DIAGONAL ", x = direcciones)
direcciones <- gsub(pattern = "^K ", replacement = "CARRERA ", x = direcciones)
direcciones <- gsub(pattern = "NUM ", replacement = " ", x = direcciones)
direcciones <- gsub(pattern = "NUMERO ", replacement = " ", x = direcciones)
direcciones <- gsub(pattern = "AUTO ", replacement = "AUTOPISTA ", x = direcciones)
direcciones <- gsub(pattern = "AUTOP N ", replacement = "AUTOPISTA NORTE ", x = direcciones)
direcciones <- gsub(pattern = "SUR", replacement = " SUR ", x = direcciones)
# Quitar parentesis y contenido
direcciones <-gsub(pattern = "\\s*\\([^\\)]+\\)",replacement = " ",x = direcciones)
# Quitar abreviaturas
direcciones <- gsub(pattern = " OF.*| CN.*| CON.*| EDF.*| EDIF.*| LOC.*| PIS.*| ED.*| TO.*| BARR.*| CS.*| AP.*| IN.*| PI.*| Y .*| LC.*| PSO.*| P .*| P-.*| SEGUNDO.*| PLA.*| PRIM.*| 1ER.*| DENTRO.*| ENTRA.*| BODEG.*| SALA.*| CENTRO COM.*| DEPART.*| CASA.*| CC.*",
replacement = "", x = direcciones)
direcciones <- gsub(pattern = "-", replacement = " ", x = direcciones)
# Pegar la letra al numero en la dirección ej: CALLE 3 B 98 15 por: CALLE 3B 98 15
direcciones <- gsub(pattern = " ([A-Z]) ", replacement = "\\1 ", x = direcciones)
# POner el guion del ultimo numero
direcciones <- gsub(pattern = "(^.*) ([0-9]{1,2})(.*)$", replacement = "\\1-\\2\\3", x = direcciones)
# Quitar espacio a dicionales
direcciones <- str_squish(string = direcciones)
return(direcciones)
}
library(dplyr)
library(ggplot2)
library(readr)
library(readxl)
library(writexl)
library(tidyverse)
library(stringi)
library(htmlwidgets)
library(osrm) # Se podria crear un servidor local - Convierte Direcciones en longitud y latitud
library(hereR) # Requiere de una KEY - Calcula las distancias entre dos puntos long-lat
library(leaflet)
library(sf)
library(raster)
library(gstat)
library(caret)
setwd("C:/Users/rbonilla/Google Drive/work/TheProfessional/PersonalResearch/Github/CoberturaHospitalaria/")
source(file = "CoberturaHospitalaria_funciones.R", encoding = "utf8")
# KEY para acceder HereR herer::geocode
set_key("649v2eOmWyQoDCurYqPiKjhMgjarEbS70-drf7uDH3A")
# Cuando se tenga un servidor de OpenStreet
#options(osrm.server = "http://localhost:5000/")
#getOption("osrm.server")
# Datos Hospitales ----
#hospitales <- read_excel(path = "c:/Users/rbonilla/Downloads/NearestHospital/kzp17_daten.xlsx", sheet = "KZ2017_KZP17")
hospitales <- read_csv("C:/Users/rbonilla/Downloads/NearestHospital/Registro_Especial_de_Prestadores_de_Servicios_de_Salud.csv",
locale = locale(asciify = TRUE))
# Ciudad ----
ciudad = "BOGOTÁ"
# Filtro por ciudad
hospitales <- hospitales %>% filter(nompio == ciudad)
# Estandarizacion de strings
hospitales <- hospitales %>% mutate_if(is.character, ~toupper(stri_trans_general(str = ., id = "ASCII-Latin")))
# Estandarizar direcciones
test <- data.frame(dir00 = hospitales$direccion)
hospitales$direccion <- EstandarizarDirecciones(direcciones = hospitales$direccion)
test <- test %>% mutate(dir01 = hospitales$direccion)
library(dplyr)
library(ggplot2)
library(readr)
library(readxl)
library(writexl)
library(tidyverse)
library(stringi)
library(htmlwidgets)
library(osrm) # Se podria crear un servidor local - Convierte Direcciones en longitud y latitud
library(hereR) # Requiere de una KEY - Calcula las distancias entre dos puntos long-lat
library(leaflet)
library(sf)
library(raster)
library(gstat)
library(caret)
setwd("C:/Users/rbonilla/Google Drive/work/TheProfessional/PersonalResearch/Github/CoberturaHospitalaria/")
source(file = "CoberturaHospitalaria_funciones.R", encoding = "utf8")
# KEY para acceder HereR herer::geocode
set_key("649v2eOmWyQoDCurYqPiKjhMgjarEbS70-drf7uDH3A")
# Cuando se tenga un servidor de OpenStreet
#options(osrm.server = "http://localhost:5000/")
#getOption("osrm.server")
# Datos Hospitales ----
#hospitales <- read_excel(path = "c:/Users/rbonilla/Downloads/NearestHospital/kzp17_daten.xlsx", sheet = "KZ2017_KZP17")
hospitales <- read_csv("C:/Users/rbonilla/Downloads/NearestHospital/Registro_Especial_de_Prestadores_de_Servicios_de_Salud.csv",
locale = locale(asciify = TRUE))
# Ciudad ----
ciudad = "BOGOTÁ"
# Filtro por ciudad
hospitales <- hospitales %>% filter(nompio == ciudad)
# Estandarizacion de strings
hospitales <- hospitales %>% mutate_if(is.character, ~toupper(stri_trans_general(str = ., id = "ASCII-Latin")))
# Estandarizar direcciones
test <- data.frame(dir00 = hospitales$direccion)
hospitales$direccion <- EstandarizarDirecciones(direcciones = hospitales$direccion)
test <- test %>% mutate(dir01 = hospitales$direccion)
# HereR geocode
#geocode("Calle 52 71d 37, Bogota, COLOMBIA")
geocode(c("AVENIDA 1 DE MAYO 52A-96 SUR, Bogota, COLOMBIA", "AVENIDA CALLE 24 72B 94, Bogota, COLOMBIA", "TRANSVERSAL 3 49-00, Bogota, COLOMBIA"))
# HereR geocode
#geocode("Calle 52 71d 37, Bogota, COLOMBIA")
geocode(c("AVENIDA 1 DE MAYO 52A-96 SUR, Bogota, COLOMBIA", "AVENIDA PRIMERO DE MAYO 52A-96 SUR, Bogota, COLOMBIA", "TRANSVERSAL 3 49-00, Bogota, COLOMBIA"))
# HereR geocode
#geocode("Calle 52 71d 37, Bogota, COLOMBIA")
geocode(c("TRANSVERSAL 60 115-58T B, Bogota, COLOMBIA", "AVENIDA PRIMERO DE MAYO 52A-96 SUR, Bogota, COLOMBIA", "TRANSVERSAL 3 49-00, Bogota, COLOMBIA"))
# HereR geocode
#geocode("Calle 52 71d 37, Bogota, COLOMBIA")
geocode(c("TRANSVERSAL 60 115-58, Bogota, COLOMBIA", "AVENIDA PRIMERO DE MAYO 52A-96 SUR, Bogota, COLOMBIA", "TRANSVERSAL 3 49-00, Bogota, COLOMBIA"))
# HereR geocode
#geocode("Calle 52 71d 37, Bogota, COLOMBIA")
geocode(c("TRANSVERSAL 60 115 58, Bogota, COLOMBIA", "AVENIDA PRIMERO DE MAYO 52A-96 SUR, Bogota, COLOMBIA", "TRANSVERSAL 3 49-00, Bogota, COLOMBIA"))
# HereR geocode
#geocode("Calle 52 71d 37, Bogota, COLOMBIA")
geocode(c("TRANSVERSAL 60 115-58, Bogota, COLOMBIA", "AVENIDA PRIMERO DE MAYO 52A-96 SUR, Bogota, COLOMBIA", "TRANSVERSAL 3 49-00, Bogota, COLOMBIA"))
# HereR geocode
#geocode("Calle 52 71d 37, Bogota, COLOMBIA")
geocode(c("TRANSVERSAL 60 115 58, Bogota, COLOMBIA", "TRANSVERSAL 3 49-00, Bogota, COLOMBIA"))
library(dplyr)
library(ggplot2)
library(readr)
library(readxl)
library(writexl)
library(tidyverse)
library(stringi)
library(htmlwidgets)
library(osrm) # Se podria crear un servidor local - Convierte Direcciones en longitud y latitud
library(hereR) # Requiere de una KEY - Calcula las distancias entre dos puntos long-lat
library(leaflet)
library(sf)
library(raster)
library(gstat)
library(caret)
setwd("C:/Users/rbonilla/Google Drive/work/TheProfessional/PersonalResearch/Github/CoberturaHospitalaria/")
source(file = "CoberturaHospitalaria_funciones.R", encoding = "utf8")
# KEY para acceder HereR herer::geocode
set_key("649v2eOmWyQoDCurYqPiKjhMgjarEbS70-drf7uDH3A")
# Cuando se tenga un servidor de OpenStreet
#options(osrm.server = "http://localhost:5000/")
#getOption("osrm.server")
# Datos Hospitales ----
#hospitales <- read_excel(path = "c:/Users/rbonilla/Downloads/NearestHospital/kzp17_daten.xlsx", sheet = "KZ2017_KZP17")
hospitales <- read_csv("C:/Users/rbonilla/Downloads/NearestHospital/Registro_Especial_de_Prestadores_de_Servicios_de_Salud.csv",
locale = locale(asciify = TRUE))
# Ciudad ----
ciudad = "BOGOTÁ"
# Filtro por ciudad
hospitales <- hospitales %>% filter(nompio == ciudad)
# Estandarizacion de strings
hospitales <- hospitales %>% mutate_if(is.character, ~toupper(stri_trans_general(str = ., id = "ASCII-Latin")))
# Estandarizar direcciones
test <- data.frame(dir00 = hospitales$direccion)
hospitales$direccion <- EstandarizarDirecciones(direcciones = hospitales$direccion)
test <- test %>% mutate(dir01 = hospitales$direccion)
# se filtran las direcciones que se buscan y se ajusta la ortografia para llamar a osrm
hospitales_Seleccionados <- hospitales %>% filter(nchar(direccion)>5) %>% dplyr::select(nombre, direccion, telefono, email, najunombre, ese, nitsnit)
if(grepl(pattern = "CALI", x = ciudad)){
hospitales_Seleccionados$direccion <- paste(str_to_title(hospitales_Seleccionados$direccion) , ", Cali Valle, COLOMBIA", sep = "")
}else{
hospitales_Seleccionados$direccion <- paste(str_to_title(hospitales_Seleccionados$direccion) , ", Bogota, COLOMBIA", sep = "")
}
# Ejemplo de Hospitales
set.seed(33)
sample_n(hospitales_Seleccionados, 3)
# HereR geocode
#geocode("Calle 52 71d 37, Bogota, COLOMBIA")
#geocode(c("TRANSVERSAL 60 115 58, Bogota, COLOMBIA", "TRANSVERSAL 3 49-00, Bogota, COLOMBIA"))
# RUN geocode
hospitales_Seleccionados_geocoded <- geocode(hospitales_Seleccionados$direccion)
hospitales_Seleccionados_geocoded %>% write_rds(path = "hospitales_Seleccionados_geocoded_BOGOTA.RDS")
# crear LONG LAT ----
dfCoordinates <- data.frame(st_coordinates(x = hospitales_Seleccionados_geocoded), stringsAsFactors = F)
names(dfCoordinates) <- c("lon", "lat")
hospitales_Seleccionados_geocoded <- hospitales_Seleccionados_geocoded %>% bind_cols(dfCoordinates)
# El archivo original los Nombres pero el encoded la posicion se pega por id ----
hospitales_Seleccionados$id <- as.numeric(1:nrow(hospitales_Seleccionados))
hospitales_Seleccionados_geocoded <- left_join(x = hospitales_Seleccionados_geocoded,
y = dplyr::select(hospitales_Seleccionados, -direccion),
by = "id")
# Filtro "HOSPITAL" ----
hospitales_Seleccionados_geocoded <- hospitales_Seleccionados_geocoded %>%
#filter(grepl(pattern = "HOSPITAL|CLINICA|UNIDAD|FUNDACION|CENTRO MEDICO|IPS|EPS", x = nombre)) %>%
filter(grepl(pattern = "HOSPITAL|CLINICA|UNIDAD|FUNDACION|CENTRO MEDICO", x = nombre)) %>%
filter(!grepl(pattern = "ODON", x = nombre)) %>%
filter(!grepl(pattern = "MAESTRO", x = nombre))
# Raster MAP ----
icons <- iconList(
hospital = makeIcon("location_3440906.png", iconWidth = 18, iconHeight = 18)
)
basicmap <- leaflet() %>%
#addProviderTiles(providers$CartoDB.Positron) %>%
addProviderTiles(providers$OpenStreetMap) %>%
addMarkers(data = hospitales_Seleccionados_geocoded,
lng = ~lon, lat = ~lat, popup = ~nombre,
group = "Unidades de atención", icon = icons["hospital"])
basicmap %>%
addLayersControl(overlayGroups = c("Hospitales"))
View(hospitales)
